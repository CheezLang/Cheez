use import std.array
use import std.ring_queue
use import std.mem.allocator
use import std.mem.arena_allocator
use import std.process
use import std.string
use import std.time
use import std.rc
use import std.thread

C   :: import std.c
fmt :: import std.fmt
fs  :: import std.io.fs
io  :: import std.io

use import clap.clap
use import logging.logger

use import compiler
use import config
use import error_handler
use import jobs
use import lexer
use import parser
use import scope
use import string_database
use import value

LOG_PATH :: "../data/logs/compiler_log.txt"

Main :: () {
    // logger := Logger.new(LOG_PATH)
    // logger.get().clear()

    args_array := get_cmd_args()
    compiler_args := parse_arguments(MainCommand, args_array.sliceF(1))

    if compiler_args == null {
        // io.println(get_help_message(MainCommand))
        return
    }

    io.println(fmt.format_any(*compiler_args))

    match *compiler_args {
        MainCommand.Build($options) -> command_build(^options)

        MainCommand.Compile($options) -> command_compile(^options)
        MainCommand.Repl($options) -> command_repl(^options)

        MainCommand.Project($poptions) -> match poptions {
            CommandProject.New($options) -> command_project_new(^options)
        }

        MainCommand.Help -> io.println(get_help_message(@type_info(MainCommand)))

        MainCommand.DumpTokens($file) -> dump_tokens(file.slice())

        // MainCommand.FindToken($options) -> find_tokens_of_type(^options)
    }
}

#file_scope

MainCommand :: enum {
    #name("help")
    #help("Displays this help info")
    Help

    #name("compile")
    #help("Compile files")
    Compile : CommandCompile

    #name("build")
    #help("Build a project using a build script (default: build.cheez)")
    Build : CommandBuild

    #name("repl")
    #help("Start are repl session")
    Repl : CommandRepl

    #name("project")
    #help("Manage projects")
    Project : CommandProject

    #name("run")
    #help("Run a bytecode or source file")
    Run : CommandRun

    // #name("find-tokens")
    // #help("Find all occurences of a specific token type in a file")
    // FindToken : CommandFindToken

    #name("dump-tokens")
    #help("Dump all tokens in the specified file")
    DumpTokens : String
}

CommandCompile :: struct {
    #help("List of files to compile (.cheez extension optional)
e.g. ... compile foo.cheez bar.cheez
e.g. ... compile foo bar")
    files : Array[String]

    thread_count := 1

    debug_interpreter := false
    debug_jobs        := false
    debug_parser      := false
    debug_wait        := false
    dump_ast          := false
    print_ast         := false
    print_typed_ast   := false
}

CommandBuild :: struct {
    thread_count := 1

    debug_interpreter := false
    debug_jobs        := false
    debug_parser      := false
    debug_wait        := false
    dump_ast          := false
    print_ast         := false
    print_typed_ast   := false
}

CommandRepl :: struct {
    thread_count := 1

    debug_interpreter := false
    debug_jobs        := false
    debug_parser      := false
    debug_wait        := false
    dump_ast          := false
    print_ast         := false
    print_typed_ast   := false
}

CommandProject :: enum {
    #name("new")
    #help("Create a new project")
    New : CommandProjectNew

    #help("Change the type of a project")
    #name("change-type")
    ChangeType : ProjectType
}

CommandRun :: struct {
    #help("File to run. Can be a source file (.cheez) or bytecode file (.cheezb)")
    file : String
}

CommandProjectNew :: struct {
    #help("The name of the project to be created")
    name : String

    #name("type")
    #help("The type of project you want to create")
    typ  : ProjectType

    #name("no-git")
    #help("Don't create a git repository")
    no_git: bool = false
}

CommandProjectChangeType :: struct {
    #help("The name of the project to be created")
    name : String

    #name("type")
    #help("The type of project you want to create")
    typ  : ProjectType
}

ProjectType :: enum {
    #name("program")
    #help("Executable program")
    Program
    #name("dynamic-lib")
    #help("Dynamic library")
    DynamicLibrary
    #name("static-lib")
    #help("Static library")
    StaticLibrary
}

CommandFindToken :: struct {
    #name("file")
    #help("The file to search tokens in")
    file : String

    #name("type")
    #help("The type of token to search for")
    typ : TokenType

    #name("suffix")
    #help("If searching for a literal, only include those with the specified suffix")
    suffix : Option[String] = None
}

find_tokens_of_type :: (options: ^CommandFindToken) {
    mut console_error_handler := ConsoleErrorHandler.new(null)
    console_error_handler.code_color_error  = io.ConsoleColor.Green
    console_error_handler.code_color_normal = io.ConsoleColor.White

    mut string_db := StringDatabase.new()
    mut lexer := try_with(
        Lexer.from_file(
            options.file.slice(), &mut string_db),
            {
                io.printfln("Failed to open file '{}'", options.file.slice())
                return
            })
    console_error_handler.text_provider = ^*lexer.get()

    suffix, filter_suffix := match &options.suffix {
        Some($str) -> str.slice(), true
        None -> "", false
    }

    loop {
        token := lexer.get_mut().next_token()

        if int(token.typ) == int(TokenType.EOF) then break
        if int(token.typ) != int(options.typ) then continue

        if filter_suffix {
            match token.suffix {
                Some($s) if streq(suffix, s)  -> console_error_handler.report_error_at(token.location, "")
                None     if streq(suffix, "") -> console_error_handler.report_error_at(token.location, "")
            }
        } else {
            console_error_handler.report_error_at(token.location, "")
        }
    }
}

command_project_new :: (options: ^CommandProjectNew) {
    // io.println(fmt.format("creating new project named '{}' of type {}", [options.name.slice(), options.typ]))
    match &options.typ {
        ProjectType.Program -> command_project_new_program(options)
    }
}

command_project_new_program :: (options: ^CommandProjectNew) {
    create_dir :: (dir_format: string, dir_args: []^any) #macro {
        dir := fmt.format(dir_format, dir_args)
        // io.printfln("Creating directory '{}'", dir.slice())
        fs.create_directory(dir.slice())
    }

    create_file :: (path_format: string, path_args: []^any, content_format: string, content_args: []^any) {
        path    := fmt.format(path_format, path_args)
        content := fmt.format(content_format, content_args)
        // io.printfln("Creating file '{}'", path.slice())
        fs.write_file(path.slice(), content.slice())
    }

    io.printfln("Creating project files for new project '{}'", options.name.slice())
    create_dir("{}", [options.name.slice()])
    create_dir("{}/src", [options.name.slice()])
    create_dir("{}/bin", [options.name.slice()])
    create_dir("{}/modules", [options.name.slice()])

    create_file("{}/src/{}",
                [options.name.slice(), "main.che"],
"io :: import std.io

Main :: () ``{
    io.println(`"Hello, {}!`")
}",
                [options.name.slice()])

    create_file("{}/build.ps1",
                [options.name.slice()],
"[CmdletBinding()]
param ([Parameter(ValueFromRemainingArguments)] [string[]] $Passthrough)
&cheezc ./src/main.che --out ./bin --name {} --time @Passthrough",
                [options.name.slice()])

    if !options.no_git {
        create_file("{}/.gitignore", [options.name.slice()],
"# Build results
bin/", [])

        // find git.exe
        io.println("Initializing git repository...")
        match find_on_path("git.exe") {
            None -> {
                io.println("[ERROR] No git installation found.")
            }

            Some($path) -> {
                // init git repo
                run_process(path.slice(), ["init"], options.name.slice())
            }
        }
    }
}

command_compile :: (options: ^CommandCompile) {
    DEBUG_INTERPRETER = options.debug_interpreter
    DEBUG_JOBS        = options.debug_jobs
    DEBUG_PARSER      = options.debug_parser
    DEBUG_WAIT        = options.debug_wait
    DUMP_AST          = options.dump_ast
    PRINT_AST         = options.print_ast
    PRINT_TYPED_AST   = options.print_typed_ast
    compile_files(options.files.slice(), options.thread_count)
}

command_build :: (options: ^CommandBuild) {
    DEBUG_INTERPRETER = options.debug_interpreter
    DEBUG_JOBS        = options.debug_jobs
    DEBUG_PARSER      = options.debug_parser
    DEBUG_WAIT        = options.debug_wait
    DUMP_AST          = options.dump_ast
    PRINT_AST         = options.print_ast
    PRINT_TYPED_AST   = options.print_typed_ast

    mut console_error_handler := ConsoleErrorHandler.new(null)

    if options.thread_count < 1 or options.thread_count > 32 {
        console_error_handler.report_error("Invalid thread_count: {}", [options.thread_count])
        return
    }

    mut compiler := Compiler.new(options.thread_count, ^console_error_handler)
    mut main_workspace := compiler.get().get_main_workspace()

    wd := match fs.get_working_directory() {
        Ok($wd) -> wd
        Err(_) -> {
            io.println("[FATAL] Failed to get working directory")
            return
        }
    }
    build_file := fmt.format("{}/build.cheez", [wd.slice()])
    main_workspace.get_mut().create_and_add_job(LoadFileJob.new(build_file))

    //
    compiler.get().user_defined_builtins.add((
        "_get_compiler",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                frame.set_return(g_compiler)
            },
            fn() -> ^Compiler
        ))
    ))

    compiler.get().user_defined_builtins.add((
        "_print_char",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                io.format("{}", [frame.get_arg(0, char)])
                io.set_console_foreground_color(.White)
            },
            fn(char)
        ))
    ))
    compiler.get().user_defined_builtins.add((
        "_println",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                io.formatln("{}", [frame.get_arg(0, string)])
                io.set_console_foreground_color(.White)
            },
            fn(string)
        ))
    ))
    compiler.get().user_defined_builtins.add((
        "_print",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                io.format("{}", [frame.get_arg(0, string)])
                io.set_console_foreground_color(.White)
            },
            fn(string)
        ))
    ))

    compiler.get().user_defined_builtins.add((
        "_debugbreak",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {},
            fn()
        ))
    ))

    start := get_time_milliseconds()
    compiler.get_mut().start_compilation()
    compiler.get_mut().wait_until_done()
    end := get_time_milliseconds()
    dur := end - start
    g_logger.log("[Compiler] Compilation took {} ms", [dur])
}



StdioInputStream :: struct {
    mutex  := Mutex.new()
    inputs := RingQueue[String].new()
    closed := false
    last   := String.empty()
}

impl StdioInputStream {
    new :: () -> StdioInputStream {
        return StdioInputStream()
    }

    add :: (&mut Self, input: string) {
        self.mutex.lock()
        defer self.mutex.release()
        self.inputs.push(input.to_owned())
    }

    close :: (&mut Self) {
        self.mutex.lock()
        defer self.mutex.release()
        self.closed = true
    }
}

impl LexerInputStream for StdioInputStream {
    get_name :: (&Self) -> string {
        return "stdin"
    }

    get_text :: (&Self) -> Option[string] {
        self := cast(&mut Self) self

        self.mutex.lock()
        defer self.mutex.release()

        wait_until(self.inputs.count() > 0, on_error = {
            // @todo: error, what to do?
            return None
        }, on_yield = {
            if self.inputs.count() == 0 and self.closed {
                io.formatln("on_yield: closed")
                return None
            }
            self.mutex.release()
        }, on_resume = {
            self.mutex.lock()
        })

        @assert(self.inputs.count() > 0)

        self.last = self.inputs.pop()
        return Some(self.last.slice())
    }
}

command_repl :: (options: ^CommandRepl) {
    DEBUG_INTERPRETER = options.debug_interpreter
    DEBUG_JOBS        = options.debug_jobs
    DEBUG_PARSER      = options.debug_parser
    DEBUG_WAIT        = options.debug_wait
    DUMP_AST          = options.dump_ast
    PRINT_AST         = options.print_ast
    PRINT_TYPED_AST   = options.print_typed_ast

    mut console_error_handler := ConsoleErrorHandler.new(null)

    if options.thread_count < 1 or options.thread_count > 32 {
        console_error_handler.report_error("Invalid thread_count: {}", [options.thread_count])
        return
    }

    mut compiler := Compiler.new(options.thread_count, ^console_error_handler)
    mut main_workspace := compiler.get().get_main_workspace()

    //
    compiler.get().user_defined_builtins.add((
        "_get_compiler",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                frame.set_return(g_compiler)
            },
            fn() -> ^Compiler
        ))
    ))

    compiler.get().user_defined_builtins.add((
        "_print_char",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                io.format("{}", [frame.get_arg(0, char)])
                io.set_console_foreground_color(.White)
            },
            fn(char)
        ))
    ))
    compiler.get().user_defined_builtins.add((
        "_println",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                // g_logger.log("{} ", [frame.get_arg(0, string)])
                io.formatln("{}", [frame.get_arg(0, string)])
                io.set_console_foreground_color(.White)
            },
            fn(string)
        ))
    ))
    compiler.get().user_defined_builtins.add((
        "_print",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {
                frame := interp.top_frame()
                io.set_console_foreground_color(.Green)
                io.format("{}", [frame.get_arg(0, string)])
                io.set_console_foreground_color(.White)
            },
            fn(string)
        ))
    ))

    compiler.get().user_defined_builtins.add((
        "_debugbreak",
        Symbol.NativeFunc(NativeFunctionWrapper.new(
            cast(NativeFunction) (interp) => {},
            fn()
        ))
    ))

    compiler.get_mut().module_path = "D:/dev/Cheez/Cheez/test"
    compiler.get_mut().start_compilation()

    buffer := alloc_n(char8, 1024)
    defer free_n(buffer)

    mut stream := Rc[StdioInputStream].new(StdioInputStream.new())

    add_text :: (compiler: &mut Compiler, workspace: &mut Workspace, stream: &mut StdioInputStream, text: string) {
        workspace.append_source_text("stdin", text)
        stream.add(text)
        compiler.flush_waiting_fibers()
    }
    
    add_text(compiler.get_mut(), main_workspace.get_mut(), stream.get_mut(), "std :: import `"std.cheez`"`n")

    main_workspace.get_mut().create_and_add_job(ReplJob.new(stream.clone().change_type(LexerInputStream)))

    loop {
        io.print("> ")
        result := C.fgets(cast(^mut char8) buffer.data, i32(buffer.length), C.stdin)
        if result == null {
            break
        }

        mut length := 0
        for c in buffer {
            if c == '`n' {
                length = it_index + 1
                break
            }
        }

        if length != 0 {
            text := string(cast(^mut u8) buffer.data, length)

            if text.starts_with("\") {
                text := text[1..].trim()
                if text == "quit" {
                    break
                } else if text == "status" {
                    compiler.get_mut().lock()
                    defer compiler.get_mut().release()
                    
                    waiting_fibers := &compiler.get().waiting_fibers
                    ready_fibers := &compiler.get().ready_fibers
                    io.formatln("{} fibers waiting:", [waiting_fibers.count()])
                    for &fiber in waiting_fibers {
                        if fiber.job == null {
                            io.formatln("    [{}]", [it_index])
                        } else {
                            io.formatln("    [{}] {:?}", [it_index, fiber.job.get_name()])
                        }
                    }
                    io.formatln("{} fibers ready:", [ready_fibers.count()])
                    for &fiber in ready_fibers {
                        if fiber.job == null {
                            io.formatln("    [{}]", [it_index])
                        } else {
                            io.formatln("    [{}] {:?}", [it_index, fiber.job.get_name()])
                        }
                    }
                } else if text == "flush" {
                    
                } else {
                    io.formatln("Invalid command: '\{}'", [text])
                }
            } else {
                add_text(compiler.get_mut(), main_workspace.get_mut(), stream.get_mut(), text)
                // g_logger.log("wait idle")
                compiler.get_mut().wait_idle()
                // g_logger.log("idle")
            }
        }
    }

    stream.get_mut().close()
    compiler.get_mut().wait_until_done()
}

dump_tokens :: (file: string) {
    string_db := StringDatabase.new()
    
    match Lexer.from_file(file, &string_db) {
        Ok($lexer) -> {
            loop {
                tok := lexer.get_mut().next_token()
                io.formatln("{}", [tok])
                if tok.typ == .KwDo {
                    lexer.get_mut().push_indent()
                }
                if tok.typ == .EOF then break
            }
        }

        Err(_) -> {
            io.formatln("File not found '{}'", [file])
        }
    }

    // io.println("`n-------------------------------`n")

    // stream := Rc[LexerInputStream].new(StdioInputStream.new())
    // lexer := Lexer.from_stream(stream, &string_db)
    // loop {
    //     tok := lexer.get_mut().next_token()
    //     io.formatln("{}", [tok])
    //     if tok.typ == .KwDo {
    //         lexer.get_mut().push_indent()
    //     }
    //     if tok.typ == .EOF then break
    // }

}