use import std.array
use import std.string

use import ast
use import ast_dumper

mem :: import std.mem.allocator
fmt :: import std.fmt

use import logging.logger

#export_scope

AstCloner :: struct {
    _next_id    : int
    allocator   : ^mem.Allocator
}

impl AstCloner {
    new_ast :: (&mut Self, $T: type, ast: $K) -> T {
        match T {
            ^$V -> {
                @static_assert(V == K)
                result := mem.alloc(K, allocator)
                *result = ast
                result.id = _next_id
                _next_id += 1
                return result
            }

            &$V -> {
                @static_assert(V == K)
                result := mem.alloc(K, allocator)
                *result = ast
                result.id = _next_id
                _next_id += 1
                return &*result
            }

            _ -> @static_assert(false, @typename(T))
        }
    }

    clone_array :: (&mut Self, arr: []$T) -> Array[T] {
        result := Array[T].create(arr.length)
        for node in arr {
            result.add(clone(node))
        }
        return result
    }

    clone :: (&mut Self, node: $T) -> T {
        NodeType :: match T {
            ^$V -> {
                if node == null {
                    return null
                }
                V
            }
            &$V -> V
            _ -> @static_assert(false, @typename(T))
        }
        return match NodeType {
            AstArgument -> new_ast(T, AstArgument(
                location    = node.location
                name        = clone(node.name)
                value_expr  = clone(node.value_expr)
                param       = .None
            ))

            AstArray -> new_ast(T, AstArray(
                location    = node.location
                values      = clone_array(node.values.slice())
            ))

            AstArrayType -> new_ast(T, AstArrayType(
                location    = node.location
                count       = clone(node.count)
                target      = clone(node.target)
            ))

            AstAssignment -> new_ast(T, AstAssignment(
                location    = node.location
                pattern     = clone(node.pattern)
                value_expr  = clone(node.value_expr)
            ))

            AstBinary -> new_ast(T, AstBinary(
                location    = node.location
                operator    = node.operator
                left        = clone(node.left)
                right       = clone(node.right)
            ))

            AstBlock -> new_ast(T, AstBlock(
                location    = node.location
                children    = clone_array(node.children.slice())
            ))

            AstBool -> new_ast(T, AstBool(
                location    = node.location
                bool_value  = node.bool_value
            ))

            AstBreak -> new_ast(T, AstBreak(
                location    = node.location
                label       = clone(node.label)
                value_expr  = clone(node.value_expr)
            ))

            AstCall -> new_ast(T, AstCall(
                location    = node.location
                function    = clone(node.function)
                arguments   = clone_array(node.arguments.slice())
            ))

            AstCast -> new_ast(T, AstCast(
                location    = node.location
                type_expr   = clone(node.type_expr)
                value_expr  = clone(node.value_expr)
            ))

            AstConstDecl -> new_ast(T, AstConstDecl(
                location    = node.location
                pattern     = clone(node.pattern)
                type_expr   = clone(node.type_expr)
                value_expr  = clone(node.value_expr)
                public      = node.public
            ))

            AstContinue -> new_ast(T, AstContinue(
                location    = node.location
                label       = clone(node.label)
            ))

            AstDecl -> new_ast(T, AstDecl(
                location    = node.location
                pattern     = clone(node.pattern)
                type_expr   = clone(node.type_expr)
                value_expr  = clone(node.value_expr)
                mutable     = node.mutable
                public      = node.public
            ))

            AstDefer -> new_ast(T, AstDefer(
                location    = node.location
                sub         = clone(node.sub)
            ))

            AstDot -> new_ast(T, AstDot(
                location    = node.location
                sub         = clone(node.sub)
                name        = clone(node.name)
            ))

            // AstEnum -> {

            // AstFor -> {

            AstFunction -> new_ast(T, AstFunction(
                location    = node.location
                params      = clone_array(node.params.slice())
                body        = clone(node.body)
                return_type_expr = clone(node.return_type_expr)
            ))

            AstIdentifier -> new_ast(T, AstIdentifier(
                location    = node.location
                name        = node.name
            ))

            AstIf -> new_ast(T, AstIf(
                location    = node.location
                condition   = clone(node.condition)
                true_case   = clone(node.true_case)
                false_case  = clone(node.false_case)
            ))

            AstImport -> new_ast(T, AstImport(
                location    = node.location
                path        = clone(node.path)
            ))

            AstIndex -> new_ast(T, AstIndex(
                location    = node.location
                sub         = clone(node.sub)
                arguments   = clone_array(node.arguments.slice())
            ))

            AstLoop -> new_ast(T, AstLoop(
                location    = node.location
                body        = clone(node.body)
            ))

            // AstMatch -> {

            AstNumberLiteral -> new_ast(T, AstNumberLiteral(
                location    = node.location
                value       = node.value
            ))

            AstNull -> new_ast(T, AstNull(
                location    = node.location
            ))

            AstReturn -> new_ast(T, AstReturn(
                location    = node.location
                value_expr  = clone(node.value_expr)
            ))

            AstString -> new_ast(T, AstString(
                location    = node.location
                string_value = node.string_value
            ))

            // AstPoly -> {

            AstStruct -> new_ast(T, AstStruct(
                location    = node.location
                name        = node.name
                trait_expr  = clone(node.trait_expr)
                children    = clone_array(node.children.slice())
            ))

            // AstTuple -> {

            // AstTrait -> {

            // AstUfc -> {

            AstUnary -> new_ast(T, AstUnary(
                location    = node.location
                operator    = node.operator
                sub         = clone(node.sub)
            ))

            AstNode -> match node {
                AstArgument($node) -> cast(T) clone(node)
                AstArray($node) -> cast(T) clone(node)
                AstArrayType($node) -> cast(T) clone(node)
                AstAssignment($node) -> cast(T) clone(node)
                AstBinary($node) -> cast(T) clone(node)
                AstBlock($node) -> cast(T) clone(node)
                AstBool($node) -> cast(T) clone(node)
                AstBreak($node) -> cast(T) clone(node)
                AstCall($node) -> cast(T) clone(node)
                AstCast($node) -> cast(T) clone(node)
                AstConstDecl($node) -> cast(T) clone(node)
                AstContinue($node) -> cast(T) clone(node)
                AstDecl($node) -> cast(T) clone(node)
                AstDefer($node) -> cast(T) clone(node)
                AstDot($node) -> cast(T) clone(node)
                // AstEnum($node) -> cast(T) clone(node)
                // AstFor($node) -> cast(T) clone(node)
                AstFunction($node) -> cast(T) clone(node)
                AstIdentifier($node) -> cast(T) clone(node)
                AstIf($node) -> cast(T) clone(node)
                AstImport($node) -> cast(T) clone(node)
                AstIndex($node) -> cast(T) clone(node)
                AstLoop($node) -> cast(T) clone(node)
                // AstMatch($node) -> cast(T) clone(node)
                AstNumberLiteral($node) -> cast(T) clone(node)
                AstNull($node) -> cast(T) clone(node)
                AstReturn($node) -> cast(T) clone(node)
                AstString($node) -> cast(T) clone(node)
                // AstPoly($node) -> cast(T) clone(node)
                AstStruct($node) -> cast(T) clone(node)
                // AstTuple($node) -> cast(T) clone(node)
                // AstTrait($node) -> cast(T) clone(node)
                // AstUfc($node) -> cast(T) clone(node)
                AstUnary($node) -> cast(T) clone(node)
                _ -> {
                    @assert(false)
                    node
                }
            }

            _ -> {
                @static_assert(false, @typename(T) + " not implemented yet")
                // dump := dump_ast(&*node)
                // g_logger.log("[ERROR] clone ast: node type not implemented: {}`n", [dump])
                // node
            }
        }
    }
}

#file_scope
