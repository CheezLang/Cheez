mem :: import std.mem.allocator
util :: import std.util

use import ast
use import compiler
use import interpreter

#export_scope

Value :: enum #copy {
    None
    Poison
    Function    : ^AstFunction
    Poly        : ^AstPoly
    Bool        : bool
    Char        : char
    Int         : int
    Float       : f64
    String      : string
    NativeFunc  : ^NativeFunctionWrapper
    NativeFunc2 : (wrapper: NativeFunctionWrapper2, func: fn())
    Type        : ^TypeInfo
    Module      : ^SourceFile
}

impl Value {
    as_type :: (&Self) -> ^TypeInfo {
        return match self {
            .Type($ti) -> *ti
            _ -> @assert(false)
        }
    }
    as_module :: (&Self) -> ^SourceFile {
        return match self {
            .Module($sf) -> *sf
            _ -> @assert(false)
        }
    }

    same :: (a: &Self, b: &Self) -> bool {
        use Value
        return match *a, *b {
            None, None                          -> true
            Poison, Poison                      -> true
            Function($v1), Function($v2)        -> v1 == v2
            Poly($v1), Poly($v2)                -> v1 == v2
            Bool($v1), Bool($v2)                -> v1 == v2
            Char($v1), Char($v2)                -> v1 == v2
            Int($v1), Int($v2)                  -> v1 == v2
            Float($v1), Float($v2)              -> v1 == v2
            String($v1), String($v2)            -> v1 == v2
            NativeFunc($v1), NativeFunc($v2)    -> v1 == v2
            NativeFunc2($v1), NativeFunc2($v2)  -> @assert(false)
            Type($v1), Type($v2)                -> v1 == v2
            Module($v1), Module($v2)            -> v1 == v2
            _ -> false
        }
    }
}

NativeFunction :: Fn(^Interpreter)

NativeFunctionWrapper2 :: fn(fn(), ^Interpreter)

NativeFunctionWrapper :: struct {
    function            : NativeFunction
    function_type       : ^TypeInfoFunction
    arg_slots           : int
    parameter_indices   : []int
}

impl NativeFunctionWrapper {
    new :: (func: NativeFunction, $T: type) -> ^NativeFunctionWrapper {
        ti := cast(^TypeInfoFunction) @type_info(T)
        raw := mem.alloc_raw(u8, cast @sizeof(NativeFunctionWrapper) + ti.param_types.length * @sizeof(int))

        mut indices : []mut int = cast(^mut int) util.pointer_add(raw, @sizeof(NativeFunctionWrapper))
        indices.length = ti.param_types.length
        wrapper := cast(^mut NativeFunctionWrapper) raw

        mut slot_index := 0
        for(reverse=true) typ in ti.param_types {
            slot_index -= (typ.size + 7) / 8
            *indices[it_index_rev] = slot_index
        }

        *wrapper = NativeFunctionWrapper(
            function            = func
            function_type       = ti
            arg_slots           = -slot_index
            parameter_indices   = indices
        )
        return wrapper
    }

    slots_for_type :: (ti: ^TypeInfoFunction) -> int {
        mut slots := 0
        for(reverse=true) typ in ti.param_types {
            slots += (typ.size + 7) / 8
        }
        return slots
    }
}
